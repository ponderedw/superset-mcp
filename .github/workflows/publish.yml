name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      mcp_image: ${{ steps.filter.outputs.mcp_image == 'true' }}
      mcp_library: ${{ steps.filter.outputs.mcp_library == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures that the full history is fetched

      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            mcp_image:
              - 'superset_mcp_server/**/*'
              - 'poetry.lock'
              - 'pyproject.toml'
              - 'Dockerfile'
            mcp_library:
              - 'superset_mcp_server/**/*'
              - 'poetry.lock'
              - 'pyproject.toml'
            

  mcp_image:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.mcp_image == 'true'
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: pondered/superset-mcp:latest,pondered/superset-mcp:${{ steps.timestamp.outputs.timestamp }}
          platforms: linux/amd64,linux/arm64

  publish_mcp_library:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.mcp_library == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: poetry install

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish -u __token__ -p $PYPI_TOKEN


